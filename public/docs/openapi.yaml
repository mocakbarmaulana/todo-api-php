openapi: 3.0.3
info:
  title: 'Todo API'
  description: 'Aplikasi Simple TODO API adalah aplikasi yang memungkinkan pengguna untuk mengelola daftar tugas (TODO) mereka dengan mudah. Aplikasi ini dibangun menggunakan PHP 8.3+, Composer, dan PostgreSQL sebagai basis data. API ini dirancang untuk memberikan antarmuka yang sederhana dan efisien untuk operasi CRUD (Create, Read, Update, Delete) pada tugas.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/v1/auth/login:
    post:
      summary: 'Login a user'
      operationId: loginAUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: test@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user.'
                  example: password
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/v1/auth/register:
    post:
      summary: 'Register a user'
      operationId: registerAUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user.'
                  example: test@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user.'
                  example: password
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'The password confirmation of the user.'
                  example: password
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/v1/auth/logout:
    post:
      summary: 'Logout a user'
      operationId: logoutAUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
  /api/v1/auth/me:
    get:
      summary: 'Get the authenticated user'
      operationId: getTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Auth
  /api/v1/jokes:
    get:
      summary: 'Get a random joke'
      operationId: getARandomJoke
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Random Joke'
  /api/v1/todos:
    get:
      summary: "Get all tod'os"
      operationId: getAllTodos
      description: ''
      parameters:
        -
          in: query
          name: is_completed
          description: 'Filter by completed status.'
          example: true
          required: false
          schema:
            type: boolean
            description: 'Filter by completed status.'
            example: true
            nullable: false
        -
          in: query
          name: order_type
          description: 'Order by created_at.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Order by created_at.'
            example: desc
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - "Tod'os"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_completed:
                  type: boolean
                  description: ''
                  example: '1'
                  nullable: true
                  enum:
                    - '0'
                    - '1'
                order_type:
                  type: string
                  description: ''
                  example: asc
                  nullable: false
                  enum:
                    - asc
                    - desc
              required:
                - order_type
    post:
      summary: "Create a new tod'os"
      operationId: createANewTodos
      description: ''
      parameters: []
      responses: {  }
      tags:
        - "Tod'os"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "The title of the tod'os."
                  example: "My first tod'os"
                  nullable: false
                description:
                  type: string
                  description: "The description of the tod'os."
                  example: "This is my first tod'os"
                  nullable: false
                completed:
                  type: boolean
                  description: "The completed status of the tod'os."
                  example: false
                  nullable: false
              required:
                - title
                - description
                - completed
  '/api/v1/todos/{id}':
    get:
      summary: "Show a tod'os"
      operationId: showATodos
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - "Tod'os"
    parameters:
      -
        in: path
        name: id
        description: "The ID of the tod'os."
        example: '1'
        required: true
        schema:
          type: string
tags:
  -
    name: Auth
    description: "\nAPIs for managing authentication"
  -
    name: 'Random Joke'
    description: 'APIs for getting a random joke'
  -
    name: "Tod'os"
    description: "\nAPIs for managing todos."
